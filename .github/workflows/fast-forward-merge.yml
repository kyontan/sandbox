name: manual-workflow

on:
  issue_comment:
    types: created
  # workflow_dispatch:
  #   inputs:
  #     name:
  #       type: choice
  #       description: Who to greet
  #       options:
  #       - monalisa
  #       - cschleiden
  #     message:
  #     environment:
  #       type: environment

jobs:
  edit-status:
    if: |
      github.event.issue.pull_request &&
      (github.event.comment.body == 'success' || github.event.comment.body == 'pending' || github.event.comment.body == 'failure')
    runs-on: ubuntu-latest

    steps:
      - run: |
          echo "Comment on PR #${{ github.event.issue.number }}"
          echo "Comment body: ${{ github.event.comment.body }}"
      - uses: cybozu/octoken-action@v1
        id: octoken
        with:
          github_app_id: 155410
          github_app_private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - uses: actions/github-script@v5
        with:
          github-token: ${{ steps.octoken.outputs.token }}
          script: |
            const { data: pullInfo } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: context.issue.number,
            })

            await github.rest.repos.createCommitStatus({
              ...context.repo,
              sha: pullInfo.head.sha,
              state: context.payload.comment.body,
            })
  merge:
    if: |
      github.event.issue.pull_request &&
      (github.event.comment.body == '/merge' || github.event.comment.body == '/force-merge')
    runs-on: ubuntu-latest

    steps:
      - run: |
          echo "Comment on PR #${{ github.event.issue.number }}"
          echo "Comment body: ${{ github.event.comment.body }}"
      - uses: cybozu/octoken-action@v1
        id: octoken
        with:
          github_app_id: 155410
          github_app_private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - if: github.event.comment.body != '/force-merge'
        uses: actions/github-script@v5
        with:
          github-token: ${{ steps.octoken.outputs.token }}
          script: |
            const { data: pullInfo } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: context.issue.number,
            })

            const { data: reviewInfo } = await appOctokit.pulls.listReviews({
              ...context.repo,
              pull_number: context.issue.number,
            })

            const reviewStates = reviewInfo.map(x => x.state)

            const howToAutomerge = "\n\nIf you **really** ignore this and want to merge, use `/force-merge`.";

            if (reviewStates.indexOf("APPROVED") == -1) {
              // not approved by anyone
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: "### :x: Merging failed\nReason:\n- Not approved by anyone" + howToAutomerge,
              })
            }

            if (reviewStates.indexOf("REQUEST_CHANGES") == -1) {
              // someone requests changes
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: "### :x: Merging failed\nReason:\n- Someone requests changes" + howToAutomerge,
              })
            }

      - uses: actions/github-script@v5
        with:
          github-token: ${{ steps.octoken.outputs.token }}
          script: |
            const { data: pullInfo } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: context.issue.number,
            })

            await github.rest.repos.createCommitStatus({
              ...context.repo,
              sha: pullInfo.head.sha,
              state: "SUCCESS",
            })

            await github.rest.git.updateRef({
              ...context.repo,
              ref: `heads/${pullInfo.base.ref}`,
              sha: pullInfo.head.sha,
            })

#       - uses: actions/checkout@v2

      - name: Print secret value
        run: |
          echo secret = ${{env.SECRET_ENV}}
          echo secret = ${{env.SECRET_ENV}} | wc -c
      # - name: Print printenv
      #   run: printenv
