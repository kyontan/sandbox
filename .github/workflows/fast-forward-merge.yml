name: manual-workflow

on:
  issue_comment:
    types: created
  # workflow_dispatch:
  #   inputs:
  #     name:
  #       type: choice
  #       description: Who to greet
  #       options:
  #       - monalisa
  #       - cschleiden
  #     message:
  #     environment:
  #       type: environment

jobs:
  merge:
    if: |
      github.event.issue.pull_request &&
      (github.event.comment.body == '/merge' || github.event.comment.body == '/force-merge')
    runs-on: ubuntu-latest

    steps:
      - run: |
          echo "Comment on PR #${{ github.event.issue.number }}"
          echo "Comment body: ${{ github.event.comment.body }}"
      - uses: cybozu/octoken-action@v1
        id: octoken
        with:
          github_app_id: 155410
          github_app_private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - if: github.event.comment.body != '/force-merge'
        uses: actions/github-script@v5
        with:
          github-token: ${{ steps.octoken.outputs.token }}
          script: |
            console.log("url: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID");

            const { data: pullInfo } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: context.issue.number,
            })

            const { data: reviewInfo } = await github.rest.pulls.listReviews({
              ...context.repo,
              pull_number: context.issue.number,
            })

            const reviewStates = reviewInfo.map(x => x.state)

            const howToAutomerge = "\n\nIf you **really** ignore this and want to merge, use `/force-merge`.";
            let failedReason = null;

            if (pullInfo.merged) {
              failedReason = "This PR is already merged"
            } else if (reviewStates.indexOf("APPROVED") == -1) {
              failedReason = "This PR is not approved by anyone";
            } else if (reviewStates.indexOf("REQUEST_CHANGES") != -1) {
              failedReason = "Someone requests changes";
            }

            if (failedReason != null) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `### :x: Merging failed\nReason:\n- ${failedReason}${howToAutomerge}`,
              })

              throw new Error(failedReason);
            }

      - uses: actions/github-script@v5
        with:
          github-token: ${{ steps.octoken.outputs.token }}
          script: |
            console.log("url: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID");

            const { data: pullInfo } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: context.issue.number,
            })

            await github.rest.repos.createCommitStatus({
              ...context.repo,
              sha: pullInfo.head.sha,
              state: "success",
              context: "Restrict merge by user", // NOTE: This should match to the `prevent-merge-by-user` workflow.
              description: "Don't push merge button! Merging will be done by bot.",
              target_url: "https://example.com/doc-why-this-is-pending",
            })

            try {
              await github.rest.git.updateRef({
                ...context.repo,
                ref: `heads/${pullInfo.base.ref}`,
                sha: pullInfo.head.sha,
              })
            } catch (err) {
              // revert commit status
              await github.rest.repos.createCommitStatus({
                ...context.repo,
                sha: pullInfo.head.sha,
                state: "failure",
                context: "Restrict merge by user", // NOTE: This should match to the `prevent-merge-by-user` workflow.
                description: "Merging process failed for some reason. See details",
                target_url: "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID",
              })

              throw err;
            }
#       - uses: actions/checkout@v2

      # - name: Print secret value
      #   run: |
      #     echo secret = ${{env.SECRET_ENV}}
      #     echo secret = ${{env.SECRET_ENV}} | wc -c
      # - name: Print printenv
      #   run: printenv
